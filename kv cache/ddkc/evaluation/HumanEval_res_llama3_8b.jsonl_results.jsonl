{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers", "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    temp = ''\n    for char in paren_string:\n       ", "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)\n```\nThis function takes a float number as input, subtracts", "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance", "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(num - mean) for", "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if", "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "completion": "    result = []\n    for group in paren_string.split():\n        level = 0\n        max", "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]\n# or\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return 0, 1\n    total_sum = sum(numbers)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "completion": "    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n       ", "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "completion": "    if is_palindrome(string):\n        return string", "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "completion": "    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a,", "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)\n    # or", "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return abs(a)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "completion": "    return [string[:i+1] for i in range(len(string))]\n# test the function", "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "completion": "    return''.join(map(str, range(n + 1)))\n```\nThe `map`", "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))\n```\nThis function converts the string to lowercase and then uses the", "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "completion": "    music_list = music_string.split()\n    beats = []\n    for note in music_list:\n       ", "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "completion": "    count = start = 0\n    while start < len(string):\n        pos = string.find", "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "completion": "    # Split the input string into a list of numbers\n    numbers_list: List[str] =", "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "completion": "    # Sort the list of numbers\n    numbers.sort()\n    # Initialize the minimum difference and the", "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min", "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "completion": "    return len(string)\n```", "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "completion": "    for i in range(n, 0, -1):\n        if n % i == ", "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    i = 2\n    while i * i <= n:\n        if", "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in", "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "completion": "    return ''.join(char.swapcase() for char in string)\n```\nThis function uses a generator", "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)\n<|end_of_text|>", "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "completion": "    return [i for i in l if i > 0]\n```\nThe function `get", "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n == 2:\n        return", "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "completion": "    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even", "result": "passed", "passed": true}
{"task_id": "HumanEval/33", "completion": "    l' = [x for i, x in enumerate(l) if i % 3!=", "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "completion": "    return sorted(set(l))", "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "completion": "    return max(l)\n```", "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i %", "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "completion": "    return [x if i % 2 == 0 else y for i, (x,", "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "completion": "    # split string to groups. Each of length 3.\n    groups = [s[(3", "result": "passed", "passed": true}
{"task_id": "HumanEval/39", "completion": "    a, b = 0, 1\n    count = 0\n    while True", "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "completion": "    for i in range(len(l)):\n        for j in range(i + 1, len(l", "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "completion": "    # Initialize a list to store the positions of the cars\n    left_cars = [i", "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]\n```\nThe `incr_list` function", "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return", "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "completion": "    if base < 2 or base > 9:\n        raise ValueError(\"Base must be between", "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h", "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "completion": "    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n   ", "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]\n```\nThis function takes a string as input and checks if", "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "completion": "    return pow(2, n, p)\n```\nThe `pow` function in Python is", "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "completion": "    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) +", "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "completion": "    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text", "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "completion": "    return all(i < t for i in l)\n```\nThe `all` function returns `", "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "completion": "    return x + y", "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)\n# end of same_chars", "result": "passed", "passed": true}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    else:\n        return fib(n-1", "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(br", "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "completion": "    if len(l) < 2:\n        return True\n    if l[0] >", "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "completion": "    return sorted(set(l1) & set(l2))", "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "completion": "    i = 2\n    while i * i <= n:\n        if n % i:\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "completion": "    total = 0\n    for i in range(1, n + 1):\n       ", "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(br", "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "completion": "    return [i * x for i, x in enumerate(xs[1:], 1)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "completion": "    if n <= 1:\n        return 0\n    elif n == 2:\n       ", "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "completion": "    vowels = 'aeiouy'\n    count = 0\n    for char in s.lower", "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "completion": "    x = str(x)\n    shift = shift % len(x)\n    return x[-shift:]", "result": "passed", "passed": true}
{"task_id": "HumanEval/66", "completion": "    return sum(ord(c) for c in s if c.isupper())\n```\nThis function uses", "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "completion": "    # split the string into two parts\n    s = s.split()\n    # extract the number", "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []", "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "completion": "    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq", "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return lst", "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "completion": "    # Check if the three sides form a valid triangle\n    if a + b > c and", "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1]:  # check if q is a palindrome\n        if sum", "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    # Create a copy of the array\n    arr_copy = arr", "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum(len(i) for i in lst1)\n    total_chars2 =", "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "completion": "    ", "result": "passed", "passed": true}
{"task_id": "HumanEval/76", "completion": "    return n ** int(math.log(x, n)) == x\n# test the function\nprint", "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "completion": "    import math\n    return math.isclose(math.pow(math.pow(a, 1. / ", "result": "passed", "passed": true}
{"task_id": "HumanEval/78", "completion": "    primes = [2, 3, 5, 7, 11, 13", "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]  # Convert decimal to binary and remove '0b'", "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(0", "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0", "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "completion": "    ", "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(10**(n-1), 10", "result": "passed", "passed": true}
{"task_id": "HumanEval/84", "completion": "    # Convert N to binary and remove the '0b' prefix\n    binary = bin(N", "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "completion": "    return sum([i for i, x in enumerate(lst) if x % 2 == ", "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        result.append('", "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n           ", "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "completion": "    if not array:\n        return array", "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "completion": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    shifted_alphabet = alphabet[2:] + alphabet[:2]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    lst.sort()\n    if lst", "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "completion": "    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence and sentence", "result": "passed", "passed": true}
{"task_id": "HumanEval/92", "completion": "    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n       ", "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "completion": "    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    for char in message", "result": "passed", "passed": true}
{"task_id": "HumanEval/94", "completion": "    ", "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    keys = list(dict.keys())\n    if all(key", "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "completion": "    ", "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)\n# Test cases\nprint", "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i, c in enumerate(s):\n        if i % ", "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "completion": "    value = float(value)\n    if value % 1 < 0.5:\n        return", "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "completion": "    pile = [n]\n    for _ in range(n - 1):\n        n = n", "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "completion": "    return s.split()\n# test the function\nprint(words_string(\"Hi, my name is John", "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "completion": "    if x > y:\n        x, y = y, x\n    if x % ", "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    total = sum(range(n, m+", "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "completion": "    return sorted([i for i in x if all(int(digit) % 2!= ", "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "completion": "    # Filter the array to include only numbers between 1 and 9\n    filtered_arr =", "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i %", "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "completion": "    even_palindromes = 0\n    odd_palindromes = 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "completion": "    return sum(1 for num in arr if sum(int(digit) for digit in str(abs", "result": "passed", "passed": true}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    for i in range(len(arr) - 1", "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "completion": "    # Check if all elements in lst1 are even\n    if all(i % 2 ==", "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "completion": "    if not test:\n        return {}\n    test = test.split()\n    letter_count = {}\n   ", "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "completion": "    result = ''.join([i for i in s if i not in c])\n    return (", "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for i, s in enumerate(lst):\n        odd_count = sum(int(d", "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "completion": "    if not nums:\n        return 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "completion": "    rows, cols = len(grid), len(grid[0])\n    total_water = sum(sum(row", "result": "passed", "passed": true}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n``", "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        consonants =", "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "completion": "    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - ", "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst[0] + lst[1]:\n        if char", "result": "passed", "passed": true}
{"task_id": "HumanEval/120", "completion": "    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Return the first", "result": "passed", "passed": true}
{"task_id": "HumanEval/121", "completion": "    return sum([i for i in lst if i % 2!= 0 and lst.index", "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "completion": "    return sum(x for x in arr[:k] if len(str(x)) <= 2)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/123", "completion": "    sequence = [n]\n    while n!= 1:\n        if n % 2 ==", "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "completion": "    try:\n        month, day, year = map(int, date.split('-'))\n        if month", "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "completion": "    words = txt.split()\n    if not words:\n        words = txt.replace(',','').split", "result": "passed", "passed": true}
{"task_id": "HumanEval/126", "completion": "    if len(lst) <= 1:\n        return True\n    for i in range(len(lst", "result": "passed", "passed": true}
{"task_id": "HumanEval/127", "completion": "    start1, end1 = interval1\n    start2, end2 = interval2\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    signs = [1 if x > 0 else", "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "completion": "    N = len(grid)\n    visited = [[False]*N for _ in range(N)]\n   ", "result": "passed", "passed": true}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n       ", "result": "passed", "passed": true}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    for digit in str(n):\n        if int(digit) %", "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char", "result": "passed", "passed": true}
{"task_id": "HumanEval/133", "completion": "    return round(sum(math.ceil(i)**2 for i in lst))\n# test the function\nprint", "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "completion": "    if not txt:  # if the string is empty\n        return False\n    if txt", "result": "passed", "passed": true}
{"task_id": "HumanEval/135", "completion": "    for i in range(len(arr) - 1):\n        if arr[i] >= arr[i", "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "completion": "    negative_integers = [i for i in lst if i < 0]\n    positive_int", "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str):\n        a = a.replace(\",\", \".\")\n        a = float(a", "result": "passed", "passed": true}
{"task_id": "HumanEval/138", "completion": "    for i in range(2, n+1, 2):\n        for j in range", "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "completion": "    result = 1\n    for i in range(n, 0, -1):\n       ", "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "completion": "    text = text.replace(\" \", \"_\")\n    while \"  \" in text:\n        text =", "result": "passed", "passed": true}
{"task_id": "HumanEval/141", "completion": "    if len([char for char in file_name if char.isdigit()]) > 3:\n       ", "result": "passed", "passed": true}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3", "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "completion": "    # Split the sentence into words\n    words = sentence.split()", "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "completion": "    # Convert the fractions to integers\n    x_int = int(int(x.split('/')[0]) *", "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "completion": "    return sorted((num, sum(int(digit) for digit in str(abs(num)))) for num", "result": "passed", "passed": true}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if abs(num) > 10", "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n", "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"J", "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "completion": "    lst = [i for i in lst if len(i) % 2 == 0]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "completion": "    ", "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "completion": "    return sum([i**2 for i in lst if isinstance(i, int) and i %", "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "completion": "    return [abs(guess[i]-game[i]) if guess[i]!= game[i] else ", "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "completion": "    strongest_extension = None\n    strongest_strength = float('-inf')\n    for extension in extensions:\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "completion": "    if len(a) < len(b):\n        return False\n    for i in range(len(b", "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    for digit in str(abs", "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000:'m', 900: 'cm',", "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "completion": "    # Check if the sum of the squares of the two smaller sides is equal to the \n   ", "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n       ", "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "completion": "    total_eaten = number + min(need - number, remaining)\n    remaining -= total_e", "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "completion": "    if len(operator)!= len(operand) - 1:\n        raise ValueError(\"Length of", "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.is", "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n``", "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "completion": "    return [i for i in range(a, b+1) if i % 2 ==", "result": "passed", "passed": true}
