{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers", "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    temp = ''\n    for char in paren_string:\n       ", "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)\n```\nThe `truncate_number` function takes a positive floating point", "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance", "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x", "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for num in numbers:\n        result.append(num)\n        if result and result", "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "completion": "    result = []\n    for group in paren_string.split():\n        stack = []\n        max_level =", "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]\n# test\nprint(filter_by_sub", "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "completion": "    total_sum = 0\n    total_product = 1\n    for number in numbers:\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "completion": "    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n       ", "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "completion": "    if not string:\n        return string", "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "completion": "    result = ''\n    for i in range(max(len(a), len(b))):\n        bit_a =", "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)\n    # or", "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "completion": "    ", "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "completion": "    return [string[:i] for i in range(1, len(string) + 1", "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "completion": "    return''.join(str(i) for i in range(n + 1))\n```\nThe", "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))\n```\nThis function converts the string to lowercase and then uses the", "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "completion": "    music_list = []\n    for note in music_string.split():\n        if note == 'o':\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while start < len(string):\n       ", "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "completion": "    numbers_dict = {'zero': 0, 'one': 1, 'two': ", "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "completion": "    # Sort the list of numbers\n    numbers = sorted(numbers)\n    # Initialize the minimum difference", "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min", "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "completion": "    return len(string)", "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "completion": "    for i in range(n, 1, -1):\n        if n % i == ", "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    i = 2\n    while i * i <= n:\n        count", "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in", "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "completion": "    return ''.join(char.lower() if char.isupper() else char.upper() for char in string", "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)\n```\nThis function takes a list of strings as input and returns a", "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]", "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "completion": "    if n < 2:\n        return False\n    for i in range(2, int", "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "completion": "    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even", "result": "passed", "passed": true}
{"task_id": "HumanEval/33", "completion": "    return [x if i % 3!= 0 else sorted([y for y in l", "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "completion": "    return sorted(set(l))", "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "completion": "    return max(l)", "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i %", "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "completion": "    return [x for i, x in enumerate(l) if i % 2 == 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "completion": "    # split string to groups. Each of length 3.\n    groups = [s[i:i", "result": "passed", "passed": true}
{"task_id": "HumanEval/39", "completion": "    ", "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "completion": "    for i in l:\n        for j in l:\n            for k in l:\n                if", "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "completion": "    # Initialize a list to store the positions of the cars moving left to right\n    left_c", "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]\n```\nThe `incr_list` function", "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for x in l:\n        if x in seen:\n            return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "completion": "    if base < 2 or base > 10:\n        raise ValueError(\"base must be between", "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h", "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "completion": "    a, b, c, d = 0, 0, 0, 2", "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "completion": "    l = sorted(l)\n    n = len(l)\n    if n % 2 == ", "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]\n```\nThis function works by comparing the input string with its", "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "completion": "    return pow(n, -1, p)\n```\nThe `modp` function takes two", "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "completion": "    return \"\".join([chr(((ord(ch) - ord(\"a\")) - 5) %", "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "completion": "    vowels = 'aeiouAEIO'\n    return ''.join([char for char in text if", "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "completion": "    return all(i < t for i in l)\n```\nThe `all` function is a", "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "completion": "    return x + y", "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)\n```\nThis function works by sorting the characters", "result": "passed", "passed": true}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    else:\n        return fib(n-1", "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(br", "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "completion": "    if len(l) < 2:\n        return True\n    increasing = all(l[i]", "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(set", "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "completion": "    i = 2\n    while i * i <= n:\n        if n % i:\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "completion": "    return sum(range(1, n+1))\n#sum_to_n(30)\n#sum", "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(br", "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "completion": "    return [i * xs[i+1] for i in range(len(xs) - 1", "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "completion": "    if n <= 1:\n        return 0\n    elif n == 2:\n       ", "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "completion": "    vowels = 'aeiouy'\n    count = 0\n    for char in s:\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "completion": "    x = str(x)\n    if shift >= len(x):\n        return x[::-1]\n   ", "result": "passed", "passed": true}
{"task_id": "HumanEval/66", "completion": "    return sum(ord(c) for c in s if c.isupper())  # Pythonic solution", "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "completion": "    s = s.lower()\n    s = s.replace(\" apples\", \"\")\n    s = s.replace", "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "completion": "    even_nodes = [node for node in arr if node % 2 == 0]\n   ", "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num]", "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return lst", "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "completion": "    # Check if the three sides form a valid triangle\n    if a + b > c and", "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "completion": "    return q == q[::-1] and sum(q) <= w\nwill_it_fly([", "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "completion": "    # Reverse the array to compare with the original\n    rev_arr = arr[::-1]\n   ", "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "completion": "    if len(lst1) == 0 and len(lst2) == 0:\n        return", "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "completion": "    ", "result": "passed", "passed": true}
{"task_id": "HumanEval/76", "completion": "    return n**int(x**(1./float(n))) == x\n```\nThis function works", "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "completion": "    import math\n    return math.isqrt(a) ** 3 == a\n#test\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/78", "completion": "    primes = {2, 3, 5, 7, 11, 13", "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "completion": "    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2)", "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(0", "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade > 4.0", "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "completion": "    ", "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "completion": "    # Initialize the count\n    count = 0\n    \n    # Loop through all n-digit numbers", "result": "passed", "passed": true}
{"task_id": "HumanEval/84", "completion": "    binary = bin(N)[2:]  # Convert N to binary and remove the '0b", "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "completion": "    return sum(x for x in lst if x % 2 == 0 and lst.index(x", "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        result.append('", "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate", "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "completion": "    if not array:\n        return array", "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "completion": "    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            shift = ord", "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "completion": "    lst = sorted(set(lst))  # remove duplicates and sort\n    if len(lst) <", "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split('. ')\n    boredoms = 0\n    for sentence in sentences:\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/92", "completion": "    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n       ", "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "completion": "    result = ''\n    for char in message:\n        if char.isupper():\n            result += chr", "result": "passed", "passed": true}
{"task_id": "HumanEval/94", "completion": "    ", "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "completion": "    if len(dict) == 0:\n        return False\n    for key in dict:\n       ", "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)\n```\nThis function takes", "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i, c in enumerate(s):\n        if i % ", "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "completion": "    value = float(value)\n    if value % 1 < 0.5:\n        return", "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n+1):\n        if i %", "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "completion": "    return s.split()\n```\nThis function uses the built-in `split()` method of the string", "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "completion": "    for i in range(max(x, y), min(x, y), -2):\n        if", "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    total = sum(range(n, m+", "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "completion": "    return sorted([i for i in x if not any(int(digit) % 2 ==", "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "completion": "    result = []\n    for num in sorted([x for x in arr if 1 <= x", "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i %", "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "completion": "    even_palindromes = 0\n    odd_palindromes = 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "completion": "    return sum(1 for num in arr if sum(int(digit) for digit in str(num", "result": "passed", "passed": true}
{"task_id": "HumanEval/109", "completion": "    if len(arr) == 0:\n        return True\n    for i in range(len(arr", "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "completion": "    # Check if all elements in lst1 are odd\n    if all(i % 2!=", "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "completion": "    # Split the string into a list of letters\n    letters = test.split()\n    \n    #", "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "completion": "    result = ''.join([i for i in s if i not in c])\n    return (", "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for i, s in enumerate(lst):\n        odd_count = sum(int(d", "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums", "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "completion": "    rows = len(grid)\n    cols = len(grid[0])\n    bucket_count = 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n```", "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        consonants =", "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "completion": "    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - ", "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst[0] + lst[1]:\n        if char", "result": "passed", "passed": true}
{"task_id": "HumanEval/120", "completion": "    # Sort the array in descending order\n    arr.sort(reverse=True)\n    \n    # Return the", "result": "passed", "passed": true}
{"task_id": "HumanEval/121", "completion": "    return sum(x for x in lst if lst.index(x) % 2 == 0 and", "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "completion": "    result = 0\n    for i in range(min(k, len(arr))):\n        num =", "result": "passed", "passed": true}
{"task_id": "HumanEval/123", "completion": "    sequence = [n]\n    while n!= 1:\n        if n % 2 ==", "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "completion": "    try:\n        month, day, year = date.split('-')\n        month = int(month)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "completion": "    words = txt.split()\n    if not words:\n        words = txt.replace(',', '').lower()\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/126", "completion": "    if len(lst) < 2:\n        return True\n    for i in range(1", "result": "passed", "passed": true}
{"task_id": "HumanEval/127", "completion": "    start1, end1 = interval1\n    start2, end2 = interval2\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum =", "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "completion": "    N = len(grid)\n    visited = [[False for _ in range(N)] for _ in", "result": "passed", "passed": true}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return []\n    elif n == 1:\n        return [", "result": "passed", "passed": true}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    for digit in str(n):\n        if int(digit) %", "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char", "result": "passed", "passed": true}
{"task_id": "HumanEval/133", "completion": "    return sum(int(i) ** 2 for i in lst)", "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "completion": "    if not txt:  # if the string is empty\n        return False\n    last_char", "result": "passed", "passed": true}
{"task_id": "HumanEval/135", "completion": "    for i in range(1, len(arr)):\n        if arr[i-1] >= arr", "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "completion": "    negative_integers = [x for x in lst if x < 0]\n    positive_int", "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str) and isinstance(b, str):\n        a = float(a.replace(\",\",", "result": "passed", "passed": true}
{"task_id": "HumanEval/138", "completion": "    for i in range(2, n+1, 2):\n        for j in range", "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "completion": "    result = 1\n    for i in range(1, n+1):\n        result", "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    for char in text:\n        if char == \" \":\n            if result", "result": "passed", "passed": true}
{"task_id": "HumanEval/141", "completion": "    # Check if the file name contains more than three digits\n    if sum(c.isdigit() for", "result": "passed", "passed": true}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i, num in enumerate(lst):\n        if i % ", "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime", "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "completion": "    # Convert the fractions to integers\n    x_int = int(int(x.split('/')[0]) *", "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs", "result": "passed", "passed": true}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10:\n           ", "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n", "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"J", "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "completion": "    lst = [x for x in lst if len(x) % 2 == 0]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "completion": "    if is_prime(n):\n        return x\n    else:\n        return y", "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if isinstance(num, int) and", "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "completion": "    return [abs(score-guess) if score!=guess else 0 for score,guess in", "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "completion": "    strongest_extension = max(extensions, key=lambda x: sum(1 for c in x if", "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "completion": "    return b in a or any(b in a[i:] + a[:i] for i in", "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    for digit in str(num", "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000:'m', 900: 'cm',", "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "completion": "    # Calculate the squares of the sides\n    a_squared = a ** 2\n    b", "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n       ", "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "completion": "    eaten = number + min(need - number, remaining)\n    return [eaten, remaining", "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "completion": "    if len(operand) < 2:\n        raise ValueError(\"Operand list must have at least", "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "completion": "    result = []\n    for c in s:\n        if c.isalpha():\n            result.append(c", "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n``", "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "completion": "    even_digits = []\n    for i in range(a, b+1):\n        if i %", "result": "passed", "passed": true}
